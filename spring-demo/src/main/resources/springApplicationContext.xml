<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:test="http://www.jfun365.cn/schema/test" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.jfun365.cn/schema/test
        http://www.jfun365.cn/schema/test.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 合并成一个beanDefinition -->
    <bean id="abstractMan" class="bean.AbstractMan" abstract="true"/>
    <bean class="bean.Man" destroy-method="destroy" init-method="init" parent="abstractMan">
        <property name="name" value="hello word"/>
    </bean>

    <context:component-scan base-package="bean"/>
    <!--自定义标签-->
    <test:redis id="redis" host="192.168.1.11" port="6379" database="8" password="root"/>

    <!--方法引用注册-->
    <bean id="lookUpBase" class="bean.LookUpBase" lazy-init="false"/>
    <bean class="bean.AbstractLookUpDemo" init-method="showPrint">
        <lookup-method name="getLookUpBase" bean="lookUpBase"/>
    </bean>

    <!--<import resource="spring-jdbc.xml"/>-->
    <!--@Service @Component @Controller 如果不配做这个自定义标签，就不认识注解-->
    <!--<context:component-scan base-package="bean">
    </context:component-scan>-->


    <!--这两个beanDefinition会在实例化过程中合并成一个-->
    <!--<bean id="parent" class="com.xiangxue.jack.bean.Parent" abstract="true">
        <property name="username" value="parent name"/>
    </bean>
    <bean id="son" class="com.xiangxue.jack.bean.Son" parent="parent">
        &lt;!&ndash;<property name="username" value="son name"/>&ndash;&gt;
        <property name="age" value="18"/>
    </bean>

    <bean class="com.xiangxue.jack.service.AccountServiceImpl" id="accountService"
          autowire-candidate="false" scope="singleton" primary="true"/>

    <bean class="com.xiangxue.jack.bean.FactoryBean" id="factoryBean" autowire="byName">
        <description>com.xiangxue.jack.bean.FactoryBean</description>
        <meta key="key1" value="value1"/>
    </bean>

    <bean id="initMethodBean" class="com.xiangxue.jack.bean.InitMethodBean" init-method="initMethod"/>

    &lt;!&ndash;init-method="initMehtod" destroy-method="destroyMethod"&ndash;&gt;
    <bean class="com.xiangxue.jack.bean.PropertyClass" id="propertyClass"

          factory-bean="factoryBean" factory-method="factoryMethod"/>

    <bean id="woman" class="com.xiangxue.jack.bean.Woman" lazy-init="false"></bean>


    <bean id="people" class="com.xiangxue.jack.bean.ShowSixClass">
        &lt;!&ndash;<lookup-method name="getPeople" bean="woman"></lookup-method>&ndash;&gt;
    </bean>


    <bean id="replaceClass" class="com.xiangxue.jack.bean.ReplaceClass" lazy-init="false"/>
    <bean id="originClass" class="com.xiangxue.jack.bean.OriginClass">
        <replaced-method name="method" replacer="replaceClass">
            &lt;!&ndash;方法可能出现重载的情况，要根据类型和方法名找方法&ndash;&gt;
            <arg-type match="java.lang.String"/>
        </replaced-method>
    </bean>


    <bean class="com.xiangxue.jack.bean.ConstructorArgBean" id="constructorArgBean">
        <constructor-arg name="username" value="Jack" index="0" type="java.lang.String"/>
        <constructor-arg name="password" value="123" index="1" type="java.lang.String"/>
    </bean>

    &lt;!&ndash;@Value()&ndash;&gt;
    <bean class="com.xiangxue.jack.bean.PropertyBean" id="propertyBean">
        <property name="username" value="Jack"/>
        <property name="password" value="123"/>
        &lt;!&ndash;<aop:scoped-proxy/>&ndash;&gt;
    </bean>

    <bean class="com.xiangxue.jack.bean.DecoratorBean" id="decoratorBean"
          p:username="Jack" p:password="123" c:age="12" c:sex="1"/>

    &lt;!&ndash;TargetSource接口&ndash;&gt;
    <bean class="com.xiangxue.jack.targetSource.Girl" id="girl">
        <meta key="girlProxy" value="true"/>
    </bean>

    <bean id="businessObject" class="org.springframework.aop.framework.ProxyFactoryBean">
    </bean>-->
</beans>